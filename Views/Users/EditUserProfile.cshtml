@model RMC_Donation.Models.user

@{
    ViewBag.Title = "EditUserProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>EditUserProfile</h2>

@using (Html.BeginForm("EditUserProfile", "Users", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>user</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)

    <div class="form-group">
        @Html.LabelFor(model => model.fullname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.fullname, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.fullname, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.dob, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.dob, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.dob, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.profession, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.profession, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.profession, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.mobile_no, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.mobile_no, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.mobile_no, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.profilephoto, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.profilephoto)
            @if (!string.IsNullOrEmpty(Model.profilephoto))
            {
                <img id="profileImagePreview" src="@Model.profilephoto" alt="Current Profile Photo" style="max-width: 200px; max-height: 200px" />
                <div id="deleteProfileImage">
                    <a href="#" id="deleteProfileImageLink" data-userid="@Model.id">Delete Profile Photo</a>
                </div>
            }
            else
            {
                <img id="profileImagePreview" src="" alt="Profile Photo Preview" style="max-width: 200px; max-height: 200px; display: none" />
            }
            <input type="file" name="profileImage" id="profileImageInput" class="form-control" onchange="previewImage('profilephoto', 'deleteProfileImage')" />
            @Html.ValidationMessageFor(model => model.profilephoto, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts{
    <script>

        $(document).ready(function () {
            $('#deleteProfileImageLink').on('click', function (e) {
                e.preventDefault(); // Prevent the default link behavior

                var userId = $(this).data('userid'); // Get the user id from the link's data attribute

                if (confirm("Are you sure you want to delete this image?")) {
                    $.ajax({
                        url: '/Users/DeleteProfilePhoto', // Replace with the actual URL for deleting the profile photo
                        type: 'POST',
                        data: { userId: userId },
                        success: function (result) {
                            alert("Image Deleted Successfully");
                            location.reload(); // Reload the page to update the image
                        },
                        error: function (error) {
                            // Handle any errors
                            alert("Error deleting image: " + JSON.stringify(error));
                        }
                    });
                }
            });
        });

    $(document).ready(function () {
        $('#profileImageInput').change(function () {
            var input = this;
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#profileImagePreview').attr('src', e.target.result);
                };
                reader.readAsDataURL(input.files[0]);
            }
        });
    });

        function previewImage(imageName, deleteButtonId) {
            const fileInput = document.getElementById(`profileImageInput`);
            const imagePreview = document.getElementById(`profileImagePreview`);
            const deleteButton = document.getElementById(deleteButtonId);

            if (fileInput.files && fileInput.files[0]) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    imagePreview.style.display = 'block'; // Show the preview
                    deleteButton.style.display = 'none'; // Hide the "Delete" button
                };

                reader.readAsDataURL(fileInput.files[0]);
            } else {
                imagePreview.style.display = 'none'; // Hide the empty preview
                const lastPartOfSrc = imagePreview.src.split('/').pop().trim().toLowerCase();
                if (lastPartOfSrc === "status1.png") {
                    deleteButton.style.display = 'none';
                } else {
                    deleteButton.style.display = 'block';
                }
                imagePreview.src = '';
            }
        }

        function initializeProfileImage() {
            const imagePreview = document.getElementById('profileImagePreview');
            const deleteButton = document.getElementById('deleteProfileImage');
            const lastPartOfSrc = imagePreview.src.split('/').pop().trim().toLowerCase();

            if (lastPartOfSrc === 'status1.png') {
                deleteButton.style.display = 'none';
            } else {
                deleteButton.style.display = 'block';
            }
        }

        window.onload = initializeProfileImage;

        /*var imgpre = document.getElementById('profileImagePreview');
        console.log(imgpre.src.split('/').pop());*/

    </script>
    }